trigger:
  branches:
    include: ['*']
    exclude: [translation]
  tags:
    include: ['*']

pr:
  branches:
    exclude: ['*']

name:  $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]

pool:
  vmImage: 'macOS-latest'

variables:
  CURRENT_DATE: $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]
  REPOSITORY_NAME: $(Build.Repository.Name)

steps:
- script: |
    git submodule init
    git submodule update
    cd arm9/core
    git submodule init
    git submodule update
  displayName: 'Clone submodules'

- script: |
    curl -L https://github.com/devkitPro/pacman/releases/download/devkitpro-pacman-1.0.1/devkitpro-pacman-installer.pkg -o devkitpro-pacman-installer.pkg
    sudo installer -pkg devkitpro-pacman-installer.pkg -target /
    sudo dkp-pacman -Sy
    sudo dkp-pacman -S nds-dev --noconfirm
  displayName: 'Setup environment'
  
- script: |
    export DEVKITPRO="/opt/devkitpro"
    export DEVKITARM="/opt/devkitpro/devkitARM"
    make
  displayName: 'Build Pok√©mon Chest'

- script: |
    export DEVKITPRO="/opt/devkitpro"
    export DEVKITARM="/opt/devkitpro/devkitARM"
    sudo mv tools-osx/make_cia /usr/local/bin
    make -s cia
    cp pkmn-chest.nds $(Build.ArtifactStagingDirectory)
    cp pkmn-chest.cia $(Build.ArtifactStagingDirectory)
    echo '##vso[task.setvariable variable=COMMIT_TAG]'$(git log --format=%h -1)
    echo '##vso[task.setvariable variable=COMMIT_MESSAGE]'$(git log --pretty=format:"%an - %s" -1)
  displayName: 'Post-build steps'

- script: |    
    git config --global user.email "flamekat54@aol.com"
    git config --global user.name "TWLBot"
    git clone --depth 1 https://$GITHUB_TOKEN@github.com/Universal-Team/extras.git

    cd extras/builds/pkmn-chest
    cp ../../../pkmn-chest.nds pkmn-chest.nds
    cp ../../../pkmn-chest.cia pkmn-chest.cia
    # If setting up normally, just do `brew install qrencode`
    # I wanted to save time on the builds by skipping brew, though
    mkdir -p /usr/local/Cellar/qrencode/4.0.2/lib/
    mv ../../../tools-osx/libqrencode.4.dylib /usr/local/Cellar/qrencode/4.0.2/lib/
    mkdir -p /usr/local/opt/libpng/lib/
    mv ../../../tools-osx/libpng16.16.dylib /usr/local/opt/libpng/lib/
    ../../../tools-osx/qrencode -o pkmn-chest.png https://raw.githubusercontent.com/Universal-Team/extras/v$CURRENT_DATE/builds/pkmn-chest/pkmn-chest.cia
    ../../../tools-osx/qrencode -o pkmn-chest-release.png https://github.com/Universal-Team/pkmn-chest/releases/download/$(git describe --abbrev=0 --tags)/pkmn-chest.cia
    git stage .
    git commit -m "pkmn-chest | $(COMMIT_TAG)"
    git push origin master
    git tag v$CURRENT_DATE
    echo '##vso[task.setvariable variable=EXTRAS_COMMIT]'$(git log -1 --format="%H")
  displayName: "Commit to Universal-Team/extras"

- task: GitHubRelease@0
  displayName: "Release to Universal-Team/extras"
  inputs:
    gitHubConnection: TWLBot
    repositoryName: Universal-Team/extras
    action: create
    target: $(EXTRAS_COMMIT)
    tagSource: 'manual'
    tag: v$(CURRENT_DATE)
    title: pkmn-chest | $(COMMIT_TAG)
    releaseNotesSource: input
    releaseNotes: $(COMMIT_MESSAGE)
    assets: '$(Build.ArtifactStagingDirectory)/**/*'
    isPreRelease: true
    addChangeLog: false

- task: GitHubRelease@0
  displayName: "Release to Universal-Team/pkmn-chest"
  condition: startsWith(variables['Build.SourceBranchName'], 'v')
  inputs:
    gitHubConnection: TWLBot
    repositoryName: Universal-Team/pkmn-chest
    action: edit
    target: '$(Build.SourceVersion)'
    tag: $(Build.SourceBranchName)
    assets: '$(Build.ArtifactStagingDirectory)/**/*'

- script: |
    curl -o send.sh https://raw.githubusercontent.com/Universal-Team/discord-webhooks/master/send-azure.sh
    chmod +x send.sh
    export IMAGE=https://raw.githubusercontent.com/Universal-Team/extras/v$CURRENT_DATE/builds/pkmn-chest/pkmn-chest.png
    ./send.sh success $WEBHOOK_URL
  condition: succeeded()
  displayName: "Send success webhook"
- script: |
    curl -o send.sh https://raw.githubusercontent.com/Universal-Team/discord-webhooks/master/send-azure.sh
    chmod +x send.sh
    ./send.sh failure $WEBHOOK_URL
  condition: failed()
  displayName: "Send failure webhook"
